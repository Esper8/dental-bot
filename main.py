import telebot
import os
import json
import threading
from datetime import datetime
from dotenv import load_dotenv
from telebot import types
import random

# üö´ Disable webhook (–¥–ª—è polling)
load_dotenv()
TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)
bot.remove_webhook()

# üìÇ –§–∞–π–ª—ã
USERS_FILE = "users.json"
STATS_FILE = "stats.json"

DAYS = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
TIPS = [
    "üîπ –ú–µ–Ω—è–π –∑—É–±–Ω—É—é —â–µ—Ç–∫—É –∫–∞–∂–¥—ã–µ 3 –º–µ—Å—è—Ü–∞.",
    "üîπ –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —è–∑—ã–∫ ‚Äî –Ω–∞ –Ω—ë–º —Å–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è –±–∞–∫—Ç–µ—Ä–∏–∏.",
    "üîπ –ò—Å–ø–æ–ª—å–∑—É–π –∑—É–±–Ω—É—é –Ω–∏—Ç—å –∏–ª–∏ –∏—Ä—Ä–∏–≥–∞—Ç–æ—Ä –∫–∞–∂–¥—ã–π –≤–µ—á–µ—Ä.",
    "üîπ –ù–µ –¥–∞–≤–∏ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ ‚Äî —ç—Ç–æ –ø–æ—Ä—Ç–∏—Ç —ç–º–∞–ª—å.",
    "üîπ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ—Å–µ—â–∞–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ."
]

# üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

def load_json(path):
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# ‚öñÔ∏è –•—Ä–∞–Ω–∏–ª–∏—â–µ
users = load_json(USERS_FILE)
stats = load_json(STATS_FILE)

# üåê –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
LANG = {
    "ru": {
        "start": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã!",
        "choose_day": "üìÑ –í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        "set_morning": "üåû –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –¥–ª—è **—É—Ç—Ä–∞** –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM",
        "set_evening": "üåô –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –¥–ª—è **–≤–µ—á–µ—Ä–∞** –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM",
        "confirm": "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {day}:\nüåû –£—Ç—Ä–æ ‚Äî {morning}, üåô –í–µ—á–µ—Ä ‚Äî {evening}"
    }
}

# üöÄ /start
@bot.message_handler(commands=["start"])
def send_welcome(message):
    cid = str(message.chat.id)
    if cid not in users:
        users[cid] = {}
        save_json(USERS_FILE, users)
    text = LANG["ru"]["start"] + "\n\n" + "–ö–æ–º–∞–Ω–¥—ã:\n" \
        ‚Ä¢ "/plan ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"\n" \
        ‚Ä¢ "/tip ‚Äî —Å–æ–≤–µ—Ç"\n" \
        ‚Ä¢ "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"\n" \
        ‚Ä¢ "/motivate ‚Äî –º–µ–º"
    bot.send_message(message.chat.id, text)

# ‚öñÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
@bot.message_handler(commands=["plan"])
def ask_day(message):
    markup = types.InlineKeyboardMarkup()
    for day in DAYS:
        markup.add(types.InlineKeyboardButton(text=day, callback_data=f"set_day:{day}"))
    bot.send_message(message.chat.id, LANG["ru"]["choose_day"], reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("set_day"))
def ask_morning(call):
    cid = str(call.message.chat.id)
    day = call.data.split(":")[1]
    users.setdefault(cid, {})
    users[cid]["current_day"] = day
    save_json(USERS_FILE, users)
    bot.send_message(call.message.chat.id, LANG["ru"]["set_morning"])

@bot.message_handler(func=lambda msg: msg.text and msg.text.count(":") == 1)
def handle_morning(message):
    cid = str(message.chat.id)
    user_data = users.get(cid, {})
    if "current_day" not in user_data or "morning" in user_data.get(user_data["current_day"], {}):
        return
    day = user_data["current_day"]
    users[cid].setdefault(day, {})["morning"] = message.text.strip()
    save_json(USERS_FILE, users)
    bot.send_message(message.chat.id, LANG["ru"]["set_evening"])

@bot.message_handler(func=lambda msg: msg.text and msg.text.count(":") == 1)
def handle_evening(message):
    cid = str(message.chat.id)
    day = users[cid].get("current_day")
    users[cid][day]["evening"] = message.text.strip()
    save_json(USERS_FILE, users)
    morning = users[cid][day]["morning"]
    evening = users[cid][day]["evening"]
    bot.send_message(cid, LANG["ru"]["confirm"].format(day=day, morning=morning, evening=evening))

# ‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

def scheduler():
    while True:
        now = datetime.now().strftime("%H:%M")
        weekday = DAYS[datetime.today().weekday()]
        for cid, schedule in users.items():
            times = schedule.get(weekday, {})
            if now == times.get("morning"):
                bot.send_message(cid, "üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü–æ—Ä–∞ —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã!", reply_markup=brushed_markup())
            if now == times.get("evening"):
                bot.send_message(cid, "üåô –í–µ—á–µ—Ä–Ω—è—è —á–∏—Å—Ç–∫–∞ –∑–æ–≤—ë—Ç!", reply_markup=brushed_markup())
        threading.Event().wait(60)

# ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

def brushed_markup():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="‚úÖ –ü–æ—á–∏—Å—Ç–∏–ª!", callback_data="brushed"))
    return markup

@bot.callback_query_handler(func=lambda call: call.data == "brushed")
def handle_brushed(call):
    cid = str(call.message.chat.id)
    today = datetime.today().strftime("%Y-%m-%d")
    stats.setdefault(cid, {}).setdefault(today, 0)
    stats[cid][today] += 1
    save_json(STATS_FILE, stats)
    bot.send_message(cid, "–ó–∞–ø–∏—Å–∞–ª ‚Äî –∑—É–±—ã –ø–æ—á–∏—â–µ–Ω—ã!")

@bot.message_handler(commands=["stats"])
def show_stats(message):
    cid = str(message.chat.id)
    user_stats = stats.get(cid, {})
    total = sum(user_stats.values())
    reply = f"üìä –î–Ω–µ–π —Å —á–∏—Å—Ç–∫–æ–π: {total}\n" + "\n".join(f"{k}: {v}" for k, v in sorted(user_stats.items()))
    bot.send_message(cid, reply)

# üîπ –°–æ–≤–µ—Ç
@bot.message_handler(commands=["tip"])
def send_tip(message):
    bot.send_message(message.chat.id, random.choice(TIPS))

# üöÄ –ú–µ–º–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è
@bot.message_handler(commands=["motivate"])
def send_meme(message):
    bot.send_message(message.chat.id, "üöÄ –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! –î–∞–∂–µ –∑—É–±—ã –±–ª–µ—Å—Ç—è—Ç –æ—Ç —Ç–≤–æ–µ–π —Ä–µ—à–∏–º–æ—Å—Ç–∏!")

# ‚è± –ó–∞–ø—É—Å–∫
threading.Thread(target=scheduler, daemon=True).start()
bot.polling(non_stop=True)

