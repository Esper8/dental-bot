import telebot
import threading
import time
import random
from telebot import types
from datetime import datetime, timedelta
import json
import os

TOKEN = "8187925078:AAFHnjRxLuqajMkZ_06mwgyFiqED8pHEDCY"
bot = telebot.TeleBot(TOKEN)
bot.remove_webhook()

# –°–æ–≤–µ—Ç—ã —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞
tips = [
    "–ú–µ–Ω—è–π –∑—É–±–Ω—É—é —â—ë—Ç–∫—É –∫–∞–∂–¥—ã–µ 3 –º–µ—Å—è—Ü–∞.",
    "–ß–∏—Å—Ç–∏ –∑—É–±—ã –Ω–µ –º–µ–Ω–µ–µ 2 –º–∏–Ω—É—Ç.",
    "–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —è–∑—ã–∫ ‚Äî –Ω–∞ –Ω—ë–º —Å–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è –±–∞–∫—Ç–µ—Ä–∏–∏.",
    "–ü–æ–ª–æ—Å–∫–∞–π —Ä–æ—Ç –ø–æ—Å–ª–µ –µ–¥—ã, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å —Å—Ä–∞–∑—É –ø–æ—á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã.",
    "–ò—Å–ø–æ–ª—å–∑—É–π –∑—É–±–Ω—É—é –Ω–∏—Ç—å –∏–ª–∏ –∏—Ä—Ä–∏–≥–∞—Ç–æ—Ä –∫–∞–∂–¥—ã–π –≤–µ—á–µ—Ä.",
    "–ù–µ –Ω–∞–¥–∞–≤–∏ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ ‚Äî —ç—Ç–æ –ø–æ—Ä—Ç–∏—Ç —ç–º–∞–ª—å.",
    "–ò–∑–±–µ–≥–∞–π —Å–ª–∞–¥–æ—Å—Ç–µ–π –ø–µ—Ä–µ–¥ —Å–Ω–æ–º, –µ—Å–ª–∏ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã.",
    "–†–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ—Å–µ—â–∞–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ.",
    "–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —á–∏—Å—Ç–∫—É –∑–∞–¥–Ω–∏—Ö –∑—É–±–æ–≤ ‚Äî –æ–Ω–∏ —Å—Ç—Ä–∞–¥–∞—é—Ç —á–∞—â–µ –≤—Å–µ–≥–æ.",
    "–ü–æ–ª–µ–∑–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å —á–∏—Å—Ç–∫—É –æ–ø–æ–ª–∞—Å–∫–∏–≤–∞—Ç–µ–ª–µ–º –±–µ–∑ —Å–ø–∏—Ä—Ç–∞."
]

# –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
days_ru = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

# –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "ü¶∑ –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî DentalCoachBot.\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º,\n"
        "–∞ –µ—â—ë —Ä–∞—Å—Å–∫–∞–∂—É –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä—Ç–æ–º.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/plan ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–∏—Å—Ç–∫–∏\n"
        "/tip ‚Äî —Å–æ–≤–µ—Ç —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π\n"
        "/start ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

@bot.message_handler(commands=['plan'])
def plan(message):
    bot.send_message(
        message.chat.id,
        "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–∏—Å—Ç–∫–∏ –∑—É–±–æ–≤:\n"
        "üï¢ –£—Ç—Ä–æ–º: 07:30\n"
        "üåô –í–µ—á–µ—Ä–æ–º: 22:30\n"
        "‚è∞ –Ø –Ω–∞–ø–æ–º–Ω—é!"
    )

@bot.message_handler(commands=['tip'])
def send_tip(message):
    tip = random.choice(tips)
    bot.send_message(message.chat.id, f"ü¶∑ –°–æ–≤–µ—Ç —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞:\n{tip}")

@bot.message_handler(commands=['stats'])
def show_stats(message):
    filename = "stats.json"
    chat_id = str(message.chat.id)

    if not os.path.exists(filename):
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ—á–∏—Å—Ç–∏ –∑—É–±—ã üòâ")
        return

    with open(filename, "r", encoding="utf-8") as f:
        data = json.load(f)

    user_stats = data.get(chat_id, {})
    now = datetime.now()
    last_7_days = [(now - timedelta(days=i)).strftime("%Y-%m-%d") for i in range(6, -1, -1)]

    msg = "üßæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:\n"
    total = 0
    for day in last_7_days:
        count = user_stats.get(day, 0)
        pretty_date = datetime.strptime(day, "%Y-%m-%d").strftime("%d.%m (%a)")
        msg += f"{pretty_date}: {count} ü™•\n"
        total += count

    msg += f"\nüîÅ –í—Å–µ–≥–æ —á–∏—Å—Ç–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é: {total}"
    bot.send_message(message.chat.id, msg)

# –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def record_stat(chat_id):
    today = datetime.now().strftime("%Y-%m-%d")
    filename = "stats.json"

    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = {}

    chat_id = str(chat_id)
    if chat_id not in data:
        data[chat_id] = {}

    if today in data[chat_id]:
        data[chat_id][today] += 1
    else:
        data[chat_id][today] = 1

    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ—á–∏—Å—Ç–∏–ª"
@bot.callback_query_handler(func=lambda call: call.data == "brushed")
def handle_brushed(call):
    bot.answer_callback_query(call.id, "–ú–æ–ª–æ–¥–µ—Ü! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å ü¶∑")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    bot.send_message(call.message.chat.id, "–ó–∞–ø–∏—Å–∞–ª ‚Äî –∑—É–±—ã –ø–æ—á–∏—â–µ–Ω—ã!")
    record_stat(call.message.chat.id)

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
def scheduler():
    while True:
        now = datetime.now().strftime("%H:%M")
        if now == "07:30" or now == "22:30":
            send_reminder()
            time.sleep(60)
        time.sleep(5)

def send_reminder():
    chat_ids = [–¢–í–û–ô_CHAT_ID_–°–Æ–î–ê]
    now = datetime.now()
    weekday = days_ru[now.strftime("%A")]
    date_today = now.strftime("%d.%m.%Y")
    time_label = "üï¢ –£—Ç—Ä–æ" if now.hour < 12 else "üåô –í–µ—á–µ—Ä"

    for chat_id in chat_ids:
        tip = random.choice(tips)
        msg = (
            f"{time_label} ‚Äî –ø–æ—Ä–∞ —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã!\n\n"
            f"üìÖ –°–µ–≥–æ–¥–Ω—è {weekday}, {date_today}.\n"
            f"üí° {tip}"
        )
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ—á–∏—Å—Ç–∏–ª!", callback_data="brushed"))
        bot.send_message(chat_id, msg, reply_markup=markup)

# –ó–∞–ø—É—Å–∫
threading.Thread(target=scheduler, daemon=True).start()
bot.polling()
