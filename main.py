import telebot
import json
import os
import random
from datetime import datetime, timedelta
from telebot import types
from dotenv import load_dotenv
from apscheduler.schedulers.background import BackgroundScheduler

load_dotenv()
TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)
bot.remove_webhook()

USERS_FILE = "users.json"
DAYS = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

default_schedule = {
    "morning": "08:00",
    "evening": "21:00"
}

memes = [
    "–¢—ã ‚Äî –æ–≥–æ–Ω—å, –∞ —â–µ—Ç–∫–∞ ‚Äî —Ç–≤–æ–π –º–µ—á. ü¶∑üî•",
    "–ö–æ–≥–¥–∞ —Ç—ã —á–∏—Å—Ç–∏—à—å –∑—É–±—ã, –ö–∞—Ä–∏–µ—Å –ø–ª–∞—á–µ—Ç –≥–¥–µ-—Ç–æ –≤ —É–≥–ª—É.",
    "–ü–æ–º–Ω–∏: –ª—É—á—à–µ –ø–æ—Ç–µ—Ä—è—Ç—å 2 –º–∏–Ω—É—Ç—ã –Ω–∞ —á–∏—Å—Ç–∫—É, —á–µ–º 2 –∑—É–±–∞ –Ω–∞ –ø—Ä–∏—ë–º–µ.",
    "–ó—É–±–Ω–∞—è —Ñ–µ—è —Å–ª–µ–¥–∏—Ç –∑–∞ —Ç–æ–±–æ–π. üßö‚Äç‚ôÄÔ∏è",
    "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∑–Ω–∞–∫. –ò–¥–∏ —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã."
]

def load_users():
    if not os.path.exists(USERS_FILE):
        return {}
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_users(data):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

@bot.message_handler(commands=["start"])
def send_welcome(message):
    cid = str(message.chat.id)
    users = load_users()
    if cid not in users:
        users[cid] = {day: default_schedule.copy() for day in DAYS}
        save_users(users)
    markup = types.InlineKeyboardMarkup()
    for day in DAYS:
        markup.add(types.InlineKeyboardButton(f"üìÖ {day}", callback_data=f"set_day:{day}"))
    bot.send_message(cid, "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚§µÔ∏è", reply_markup=markup)

@bot.message_handler(commands=["motivate"])
def send_meme(message):
    meme = random.choice(memes)
    bot.send_message(message.chat.id, f"üéØ {meme}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("set_day:"))
def choose_day(call):
    day = call.data.split(":")[1]
    markup = types.InlineKeyboardMarkup()
    for hour in range(6, 12):
        markup.add(types.InlineKeyboardButton(f"üåÖ {hour:02}:00", callback_data=f"set_time:{day}:morning:{hour:02}:00"))
    bot.send_message(call.message.chat.id, f"–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ {day}", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("set_time:"))
def set_time(call):
    _, day, period, hour, minute = call.data.split(":")
    cid = str(call.message.chat.id)
    users = load_users()
    if cid not in users:
        users[cid] = {day: default_schedule.copy() for day in DAYS}
    if day not in users[cid]:
        users[cid][day] = {}
    users[cid][day][period] = f"{hour}:{minute}"
    save_users(users)

    if period == "morning":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –≤–µ—á–µ—Ä–Ω–µ–≥–æ
        markup = types.InlineKeyboardMarkup()
        for hour in range(18, 24):
            markup.add(types.InlineKeyboardButton(f"üåô {hour:02}:00", callback_data=f"set_time:{day}:evening:{hour:02}:00"))
        bot.send_message(call.message.chat.id, f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è –¥–ª—è {day}", reply_markup=markup)
    else:
        morning = users[cid][day]["morning"]
        evening = users[cid][day]["evening"]
        next_index = (DAYS.index(day) + 1) % 7
        next_day = DAYS[next_index]
        bot.send_message(call.message.chat.id, f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {day}:
–£—Ç—Ä–æ ‚Äî {morning}, –í–µ—á–µ—Ä ‚Äî {evening}")
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(f"üìÖ –ù–∞ {next_day}", callback_data=f"set_day:{next_day}"),
            types.InlineKeyboardButton("üóì –î—Ä—É–≥–æ–π –¥–µ–Ω—å", callback_data="set_custom_day")
        )
        bot.send_message(call.message.chat.id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "set_custom_day")
def custom_day(call):
    markup = types.InlineKeyboardMarkup()
    for day in DAYS:
        markup.add(types.InlineKeyboardButton(f"üìÖ {day}", callback_data=f"set_day:{day}"))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å ‚¨áÔ∏è", reply_markup=markup)

def check_and_notify():
    now = datetime.now()
    users = load_users()
    today = DAYS[now.weekday()]
    current_time = now.strftime("%H:%M")
    for cid, schedule in users.items():
        if today in schedule:
            plan = schedule[today]
            if plan.get("morning") == current_time:
                bot.send_message(cid, f"üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü–æ—Ä–∞ —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã ü™•")
            elif plan.get("evening") == current_time:
                bot.send_message(cid, f"üåô –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –∑—É–±—ã –ø–µ—Ä–µ–¥ —Å–Ω–æ–º üõè")

scheduler = BackgroundScheduler()
scheduler.add_job(check_and_notify, "cron", minute="*")
scheduler.start()

bot.polling(none_stop=True)