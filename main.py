
import telebot
memes = ['https://i.imgur.com/1JucVTA.jpeg', 'https://i.imgur.com/hRdb8Z9.jpeg', 'https://i.imgur.com/bwz9hXU.jpeg', 'https://i.imgur.com/3RY2dXK.jpeg', 'https://i.imgur.com/pDO53eq.jpeg', 'https://i.imgur.com/ti15oHJ.jpeg']
from telebot import types
import json
import os
import threading
from datetime import datetime

from dotenv import load_dotenv
load_dotenv()
TOKEN = os.getenv("TOKEN")

bot = telebot.TeleBot(TOKEN)

DAYS = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
DEFAULT_TIME = {"morning": "07:30", "evening": "22:30"}
SETTINGS_FILE = "users.json"


def load_users():
    if not os.path.exists(SETTINGS_FILE):
        return {}
    with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)


def save_users(users):
    with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, indent=2, ensure_ascii=False)


@bot.message_handler(commands=["start"])
def start(message):
    cid = str(message.chat.id)
    users = load_users()
    if cid not in users:
        users[cid] = {day: DEFAULT_TIME.copy() for day in DAYS}
        save_users(users)
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã!")
    choose_day(message)


@bot.message_handler(commands=["settings"])
def choose_day(message):
    markup = types.InlineKeyboardMarkup()
    for day in DAYS:
        markup.add(types.InlineKeyboardButton(day, callback_data=f"set_day:{day}"))
    bot.send_message(message.chat.id, "üóì –í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("set_day:"))
def set_day(call):
    day = call.data.split(":")[1]
    bot.send_message(call.message.chat.id, f"üåÖ –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –¥–ª—è **—É—Ç—Ä–∞** –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")
    bot.register_next_step_handler(call.message, get_morning_time, day)


def get_morning_time(message, day):
    morning = message.text.strip()
    bot.send_message(message.chat.id, f"üåô –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –¥–ª—è **–≤–µ—á–µ—Ä–∞** –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")
    bot.register_next_step_handler(message, get_evening_time, day, morning)


def get_evening_time(message, day, morning):
    evening = message.text.strip()
    cid = str(message.chat.id)
    users = load_users()
    if cid not in users:
        users[cid] = {d: DEFAULT_TIME.copy() for d in DAYS}
    users[cid][day] = {"morning": morning, "evening": evening}
    save_users(users)

    # –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    next_day_index = (DAYS.index(day) + 1) % 7
    next_day = DAYS[next_day_index]

    bot.send_message(message.chat.id, f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {day}:\nüåû–£—Ç—Ä–æ ‚Äî {morning}, üåô–í–µ—á–µ—Ä ‚Äî {evening}", reply_markup=markup)

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton(f"üîÅ –ù–∞ {next_day}", callback_data=f"set_day:{next_day}"),
        types.InlineKeyboardButton("üìÖ –î—Ä—É–≥–æ–π –¥–µ–Ω—å", callback_data="choose_day")
    )
    bot.send_message(message.chat.id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "choose_day")
def back_to_choose(call):
    choose_day(call.message)


def reminder_loop():
    while True:
        now = datetime.now().strftime("%H:%M")
        weekday = datetime.now().strftime("%A")
        users = load_users()
        for cid, schedule in users.items():
            user_day = schedule.get(weekday, DEFAULT_TIME)
            if now == user_day["morning"]:
                bot.send_message(cid, "üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–µ –∑–∞–±—É–¥—å –ø–æ—á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã!")
            if now == user_day["evening"]:
                bot.send_message(cid, "üåô –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è —á–∏—Å—Ç–∫–∏ –∑—É–±–æ–≤!")
        import time
        time.sleep(60)


threading.Thread(target=reminder_loop, daemon=True).start()
bot.remove_webhook()

@bot.message_handler(commands=["motivate"])
def send_motivation(message):
    meme = random.choice(memes)
    bot.send_photo(message.chat.id, meme, caption="üí™ –í–æ—Ç —Ç–µ–±–µ –º–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–∞ –¥–µ–Ω—å!")


bot.polling()
