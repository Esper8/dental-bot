
import telebot
import threading
import time
import random
from telebot import types
from datetime import datetime, timedelta
import json
import os

TOKEN = "8187925078:AAFHnjRxLuqajMkZ_06mwgyFiqED8pHEDCY"
bot = telebot.TeleBot(TOKEN)
bot.remove_webhook()

tips = [
    "–ú–µ–Ω—è–π –∑—É–±–Ω—É—é —â—ë—Ç–∫—É –∫–∞–∂–¥—ã–µ 3 –º–µ—Å—è—Ü–∞.",
    "–ß–∏—Å—Ç–∏ –∑—É–±—ã –Ω–µ –º–µ–Ω–µ–µ 2 –º–∏–Ω—É—Ç.",
    "–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —è–∑—ã–∫ ‚Äî –Ω–∞ –Ω—ë–º —Å–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è –±–∞–∫—Ç–µ—Ä–∏–∏.",
    "–ü–æ–ª–æ—Å–∫–∞–π —Ä–æ—Ç –ø–æ—Å–ª–µ –µ–¥—ã, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å —Å—Ä–∞–∑—É –ø–æ—á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã.",
    "–ò—Å–ø–æ–ª—å–∑—É–π –∑—É–±–Ω—É—é –Ω–∏—Ç—å –∏–ª–∏ –∏—Ä—Ä–∏–≥–∞—Ç–æ—Ä –∫–∞–∂–¥—ã–π –≤–µ—á–µ—Ä.",
    "–ù–µ –Ω–∞–¥–∞–≤–∏ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ ‚Äî —ç—Ç–æ –ø–æ—Ä—Ç–∏—Ç —ç–º–∞–ª—å.",
    "–ò–∑–±–µ–≥–∞–π —Å–ª–∞–¥–æ—Å—Ç–µ–π –ø–µ—Ä–µ–¥ —Å–Ω–æ–º, –µ—Å–ª–∏ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã.",
    "–†–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ—Å–µ—â–∞–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ.",
    "–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —á–∏—Å—Ç–∫—É –∑–∞–¥–Ω–∏—Ö –∑—É–±–æ–≤ ‚Äî –æ–Ω–∏ —Å—Ç—Ä–∞–¥–∞—é—Ç —á–∞—â–µ –≤—Å–µ–≥–æ.",
    "–ü–æ–ª–µ–∑–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å —á–∏—Å—Ç–∫—É –æ–ø–æ–ª–∞—Å–∫–∏–≤–∞—Ç–µ–ª–µ–º –±–µ–∑ —Å–ø–∏—Ä—Ç–∞."
]

days_ru = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

language = {"ru": "–†—É—Å—Å–∫–∏–π", "en": "English"}
user_lang = {}

def get_lang(chat_id):
    return user_lang.get(str(chat_id), "ru")

def translate(msg_ru, msg_en, chat_id):
    return msg_ru if get_lang(chat_id) == "ru" else msg_en

@bot.message_handler(commands=['start'])
def start(message):
    cid = str(message.chat.id)
    save_user(cid)
    bot.send_message(
        message.chat.id,
        translate(
            "ü¶∑ –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî DentalCoachBot.\n\n–ö–æ–º–∞–Ω–¥—ã:\n/plan ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n/tip ‚Äî —Å–æ–≤–µ—Ç\n/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/lang ‚Äî —è–∑—ã–∫\n/motivate ‚Äî –º–µ–º",
            "ü¶∑ Hello! I'm DentalCoachBot.\n\nCommands:\n/plan ‚Äî routine\n/tip ‚Äî tip\n/stats ‚Äî stats\n/lang ‚Äî language\n/motivate ‚Äî meme",
            cid
        )
    )

@bot.message_handler(commands=['plan'])
def plan(message):
    bot.send_message(message.chat.id, translate(
        "üìÖ –£—Ç—Ä–æ–º: 07:30\nüåô –í–µ—á–µ—Ä–æ–º: 22:30",
        "üìÖ Morning: 07:30\nüåô Evening: 22:30",
        message.chat.id
    ))

@bot.message_handler(commands=['tip'])
def send_tip(message):
    tip = random.choice(tips)
    bot.send_message(message.chat.id, f"ü¶∑ {translate('–°–æ–≤–µ—Ç —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞:', 'Dental tip:', message.chat.id)}\n{tip}")

@bot.message_handler(commands=['lang'])
def lang(message):
    cid = str(message.chat.id)
    current = get_lang(cid)
    new_lang = "en" if current == "ru" else "ru"
    user_lang[cid] = new_lang
    save_langs()
    bot.send_message(message.chat.id, f"üåç {translate('–Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞:', 'Language switched to: ', message.chat.id)} {language[new_lang]}")

@bot.message_handler(commands=['motivate'])
def motivate(message):
    meme_folder = "memes"
    files = [f for f in os.listdir(meme_folder) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
    if files:
        img_path = os.path.join(meme_folder, random.choice(files))
        with open(img_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo)
    else:
        bot.send_message(message.chat.id, translate("–ù–µ—Ç –º–µ–º–æ–≤ üò¢", "No memes üò¢", message.chat.id))

@bot.message_handler(commands=['stats'])
def show_stats(message):
    filename = "stats.json"
    cid = str(message.chat.id)
    if not os.path.exists(filename):
        bot.send_message(message.chat.id, translate("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", "No stats yet.", message.chat.id))
        return
    with open(filename, "r", encoding="utf-8") as f:
        data = json.load(f)
    user_stats = data.get(cid, {})
    now = datetime.now()
    last_7_days = [(now - timedelta(days=i)).strftime("%Y-%m-%d") for i in range(6, -1, -1)]
    msg = "üìä\n"
    total = 0
    for day in last_7_days:
        count = user_stats.get(day, 0)
        pretty_date = datetime.strptime(day, "%Y-%m-%d").strftime("%d.%m (%a)")
        msg += f"{pretty_date}: {count} ü™•\n"
        total += count
    msg += f"üî• {translate('–í—Å–µ–≥–æ:', 'Total:', message.chat.id)} {total}"
    bot.send_message(message.chat.id, msg)

def record_stat(chat_id):
    today = datetime.now().strftime("%Y-%m-%d")
    filename = "stats.json"
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = {}
    chat_id = str(chat_id)
    if chat_id not in data:
        data[chat_id] = {}
    data[chat_id][today] = data[chat_id].get(today, 0) + 1
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

@bot.callback_query_handler(func=lambda call: call.data == "brushed")
def handle_brushed(call):
    bot.answer_callback_query(call.id, "–ú–æ–ª–æ–¥–µ—Ü! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å ü¶∑")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    bot.send_message(call.message.chat.id, "–ó–∞–ø–∏—Å–∞–ª ‚Äî –∑—É–±—ã –ø–æ—á–∏—â–µ–Ω—ã!")
    record_stat(call.message.chat.id)

def send_reminder():
    users = load_users()
    now = datetime.now()
    weekday = days_ru[now.strftime("%A")]
    date_today = now.strftime("%d.%m.%Y")
    time_label = "üï¢ –£—Ç—Ä–æ" if now.hour < 12 else "üåô –í–µ—á–µ—Ä"
    for chat_id in users:
        tip = random.choice(tips)
        msg = f"{time_label} ‚Äî {translate('–ø–æ—Ä–∞ —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã!', 'time to brush!', chat_id)}\n\nüìÖ {weekday}, {date_today}.\nüí° {tip}"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ—á–∏—Å—Ç–∏–ª!", callback_data="brushed"))
        bot.send_message(chat_id, msg, reply_markup=markup)

def weekly_report():
    users = load_users()
    for uid in users:
        dummy = types.SimpleNamespace()
        dummy.chat = types.SimpleNamespace()
        dummy.chat.id = uid
        show_stats(dummy)

def scheduler():
    while True:
        now = datetime.now().strftime("%H:%M")
        if now == "07:30" or now == "22:30":
            send_reminder()
            time.sleep(60)
        elif now == "20:00" and datetime.now().weekday() == 6:
            weekly_report()
            time.sleep(60)
        time.sleep(5)

def save_user(cid):
    filename = "users.json"
    cid = str(cid)
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = []
    if cid not in data:
        data.append(cid)
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(data, f)

def load_users():
    try:
        with open("users.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return []

def save_langs():
    with open("langs.json", "w", encoding="utf-8") as f:
        json.dump(user_lang, f)

threading.Thread(target=scheduler, daemon=True).start()
bot.polling()
