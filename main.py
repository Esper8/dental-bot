import telebot
import json
import threading
import random
from datetime import datetime
from telebot import types

bot = telebot.TeleBot("YOUR_BOT_TOKEN")

DAYS = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
TIPS = [
    "–ú–µ–Ω—è–π –∑—É–±–Ω—É—é —â—ë—Ç–∫—É –∫–∞–∂–¥—ã–µ 3 –º–µ—Å—è—Ü–∞.",
    "–ß–∏—Å—Ç–∏ –∑—É–±—ã –Ω–µ –º–µ–Ω–µ–µ 2 –º–∏–Ω—É—Ç.",
    "–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —è–∑—ã–∫ ‚Äî –Ω–∞ –Ω—ë–º —Å–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è –±–∞–∫—Ç–µ—Ä–∏–∏.",
    "–ü–æ–ª–æ—â–∏ —Ä–æ—Ç –ø–æ—Å–ª–µ –µ–¥—ã, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å —Å—Ä–∞–∑—É –ø–æ—á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã.",
    "–ò—Å–ø–æ–ª—å–∑—É–π –∑—É–±–Ω—É—é –Ω–∏—Ç—å –∏–ª–∏ –∏—Ä—Ä–∏–≥–∞—Ç–æ—Ä –∫–∞–∂–¥—ã–π –≤–µ—á–µ—Ä.",
    "–ù–µ –Ω–∞–¥–∞–≤–∏ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ ‚Äî —ç—Ç–æ –ø–æ—Ä—Ç–∏—Ç —ç–º–∞–ª—å.",
    "–ò–∑–±–µ–≥–∞–π —Å–ª–∞–¥–æ—Å—Ç–µ–π –ø–µ—Ä–µ–¥ —Å–Ω–æ–º, –µ—Å–ª–∏ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã.",
    "–†–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ—Å–µ—â–∞–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ.",
    "–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —á–∏—Å—Ç–∫—É –∑–∞–¥–Ω–∏—Ö –∑—É–±–æ–≤ ‚Äî –æ–Ω–∏ —Å—Ç—Ä–∞–¥–∞—é—Ç —á–∞—â–µ –≤—Å–µ–≥–æ.",
    "–ü–æ–ª–µ–∑–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å —á–∏—Å—Ç–∫—É –æ–ø–æ–ª–∞—Å–∫–∏–≤–∞—Ç–µ–ª–µ–º –±–µ–∑ —Å–ø–∏—Ä—Ç–∞."
]

def load_users():
    try:
        with open("users.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_users(data):
    with open("users.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

@bot.message_handler(commands=["start"])
def send_welcome(message):
    cid = str(message.chat.id)
    users = load_users()
    if cid not in users:
        users[cid] = {}
        save_users(users)
    text = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã!

–ö–æ–º–∞–Ω–¥—ã:
/plan ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/tip ‚Äî —Å–æ–≤–µ—Ç
/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/lang ‚Äî —è–∑—ã–∫
/motivate ‚Äî –º–µ–º
"""
    bot.send_message(cid, text)
    ask_day(cid)

def ask_day(cid):
    markup = types.InlineKeyboardMarkup()
    for day in DAYS:
        markup.add(types.InlineKeyboardButton(day, callback_data=f"set_day:{day}"))
    markup.add(types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="done"))
    bot.send_message(cid, "üìÖ –í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data.startswith("set_day:"))
def get_day(call):
    cid = str(call.message.chat.id)
    day = call.data.split(":")[1]
    bot.send_message(cid, f"üï∞ –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –¥–ª—è **—É—Ç—Ä–∞** –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")
    bot.register_next_step_handler(call.message, get_morning_time, cid, day)

def validate_time_format(s):
    try:
        datetime.strptime(s, "%H:%M")
        return True
    except ValueError:
        return False

def get_morning_time(message, cid, day):
    morning = message.text.strip()
    if not validate_time_format(morning):
        bot.send_message(cid, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä, 07:30")
        bot.register_next_step_handler(message, get_morning_time, cid, day)
        return
    bot.send_message(cid, f"üåô –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –¥–ª—è **–≤–µ—á–µ—Ä–∞** –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")
    bot.register_next_step_handler(message, get_evening_time, cid, day, morning)

def get_evening_time(message, cid, day, morning):
    evening = message.text.strip()
    if not validate_time_format(evening):
        bot.send_message(cid, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä, 21:00")
        bot.register_next_step_handler(message, get_evening_time, cid, day, morning)
        return
    users = load_users()
    if cid not in users:
        users[cid] = {}
    users[cid][day] = {"morning": morning, "evening": evening}
    save_users(users)
    bot.send_message(cid, f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {day}:\nüåû–£—Ç—Ä–æ ‚Äî {morning}, üåô–í–µ—á–µ—Ä ‚Äî {evening}")
    ask_day(cid)

@bot.callback_query_handler(func=lambda c: c.data == "done")
def done_setting(call):
    cid = str(call.message.chat.id)
    bot.send_message(cid, "üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π /plan —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")

@bot.message_handler(commands=["plan"])
def show_plan(message):
    cid = str(message.chat.id)
    users = load_users()
    user_data = users.get(cid, {})
    plan = "üìÜ –ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é:\n"
    for day in DAYS:
        times = user_data.get(day, {})
        plan += f"{day}: üåû{times.get('morning', '-')} / üåô{times.get('evening', '-')}\n"
    bot.send_message(cid, plan)

@bot.message_handler(commands=["tip"])
def send_tip(message):
    bot.send_message(message.chat.id, random.choice(TIPS))

@bot.message_handler(commands=["motivate"])
def send_meme(message):
    bot.send_message(message.chat.id, "üéØ –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! –î–∞–∂–µ –∑—É–±—ã –±–ª–µ—Å—Ç—è—Ç –æ—Ç —Ç–≤–æ–µ–π —Ä–µ—à–∏–º–æ—Å—Ç–∏!")

@bot.message_handler(commands=["stats"])
def send_stats(message):
    cid = str(message.chat.id)
    users = load_users()
    user_data = users.get(cid, {})
    count_set = sum(1 for v in user_data.values() if v.get("morning") or v.get("evening"))
    bot.send_message(cid, f"üìä –¢—ã –Ω–∞—Å—Ç—Ä–æ–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {count_set} –∏–∑ 7 –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏.")

@bot.message_handler(commands=["lang"])
def send_lang(message):
    cid = str(message.chat.id)
    bot.send_message(cid, "üåê –ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –í –±—É–¥—É—â–µ–º –ø–æ—è–≤—è—Ç—Å—è –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏!")

def scheduler():
    while True:
        now = datetime.now().strftime("%H:%M")
        weekday = DAYS[datetime.today().weekday()]
        users = load_users()
        for cid, schedule in users.items():
            times = schedule.get(weekday, {})
            if now == times.get("morning"):
                bot.send_message(cid, "üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü–æ—Ä–∞ —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã!")
            if now == times.get("evening"):
                bot.send_message(cid, "üåô –í–µ—á–µ—Ä–Ω—è—è —á–∏—Å—Ç–∫–∞ –∑–æ–≤—ë—Ç!")
        threading.Event().wait(60)

threading.Thread(target=scheduler, daemon=True).start()
bot.polling(none_stop=True)
